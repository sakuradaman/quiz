// Code generated by ent, DO NOT EDIT.

package quiz

import (
	"entgo.io/ent/dialect/sql"
	"github.com/sakuradaman/quiz/pkg/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Quiz {
	return predicate.Quiz(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Quiz {
	return predicate.Quiz(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Quiz {
	return predicate.Quiz(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Quiz {
	return predicate.Quiz(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Quiz {
	return predicate.Quiz(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Quiz {
	return predicate.Quiz(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Quiz {
	return predicate.Quiz(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Quiz {
	return predicate.Quiz(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Quiz {
	return predicate.Quiz(sql.FieldLTE(FieldID, id))
}

// Problem applies equality check predicate on the "problem" field. It's identical to ProblemEQ.
func Problem(v string) predicate.Quiz {
	return predicate.Quiz(sql.FieldEQ(FieldProblem, v))
}

// Answer applies equality check predicate on the "answer" field. It's identical to AnswerEQ.
func Answer(v string) predicate.Quiz {
	return predicate.Quiz(sql.FieldEQ(FieldAnswer, v))
}

// ProblemEQ applies the EQ predicate on the "problem" field.
func ProblemEQ(v string) predicate.Quiz {
	return predicate.Quiz(sql.FieldEQ(FieldProblem, v))
}

// ProblemNEQ applies the NEQ predicate on the "problem" field.
func ProblemNEQ(v string) predicate.Quiz {
	return predicate.Quiz(sql.FieldNEQ(FieldProblem, v))
}

// ProblemIn applies the In predicate on the "problem" field.
func ProblemIn(vs ...string) predicate.Quiz {
	return predicate.Quiz(sql.FieldIn(FieldProblem, vs...))
}

// ProblemNotIn applies the NotIn predicate on the "problem" field.
func ProblemNotIn(vs ...string) predicate.Quiz {
	return predicate.Quiz(sql.FieldNotIn(FieldProblem, vs...))
}

// ProblemGT applies the GT predicate on the "problem" field.
func ProblemGT(v string) predicate.Quiz {
	return predicate.Quiz(sql.FieldGT(FieldProblem, v))
}

// ProblemGTE applies the GTE predicate on the "problem" field.
func ProblemGTE(v string) predicate.Quiz {
	return predicate.Quiz(sql.FieldGTE(FieldProblem, v))
}

// ProblemLT applies the LT predicate on the "problem" field.
func ProblemLT(v string) predicate.Quiz {
	return predicate.Quiz(sql.FieldLT(FieldProblem, v))
}

// ProblemLTE applies the LTE predicate on the "problem" field.
func ProblemLTE(v string) predicate.Quiz {
	return predicate.Quiz(sql.FieldLTE(FieldProblem, v))
}

// ProblemContains applies the Contains predicate on the "problem" field.
func ProblemContains(v string) predicate.Quiz {
	return predicate.Quiz(sql.FieldContains(FieldProblem, v))
}

// ProblemHasPrefix applies the HasPrefix predicate on the "problem" field.
func ProblemHasPrefix(v string) predicate.Quiz {
	return predicate.Quiz(sql.FieldHasPrefix(FieldProblem, v))
}

// ProblemHasSuffix applies the HasSuffix predicate on the "problem" field.
func ProblemHasSuffix(v string) predicate.Quiz {
	return predicate.Quiz(sql.FieldHasSuffix(FieldProblem, v))
}

// ProblemEqualFold applies the EqualFold predicate on the "problem" field.
func ProblemEqualFold(v string) predicate.Quiz {
	return predicate.Quiz(sql.FieldEqualFold(FieldProblem, v))
}

// ProblemContainsFold applies the ContainsFold predicate on the "problem" field.
func ProblemContainsFold(v string) predicate.Quiz {
	return predicate.Quiz(sql.FieldContainsFold(FieldProblem, v))
}

// AnswerEQ applies the EQ predicate on the "answer" field.
func AnswerEQ(v string) predicate.Quiz {
	return predicate.Quiz(sql.FieldEQ(FieldAnswer, v))
}

// AnswerNEQ applies the NEQ predicate on the "answer" field.
func AnswerNEQ(v string) predicate.Quiz {
	return predicate.Quiz(sql.FieldNEQ(FieldAnswer, v))
}

// AnswerIn applies the In predicate on the "answer" field.
func AnswerIn(vs ...string) predicate.Quiz {
	return predicate.Quiz(sql.FieldIn(FieldAnswer, vs...))
}

// AnswerNotIn applies the NotIn predicate on the "answer" field.
func AnswerNotIn(vs ...string) predicate.Quiz {
	return predicate.Quiz(sql.FieldNotIn(FieldAnswer, vs...))
}

// AnswerGT applies the GT predicate on the "answer" field.
func AnswerGT(v string) predicate.Quiz {
	return predicate.Quiz(sql.FieldGT(FieldAnswer, v))
}

// AnswerGTE applies the GTE predicate on the "answer" field.
func AnswerGTE(v string) predicate.Quiz {
	return predicate.Quiz(sql.FieldGTE(FieldAnswer, v))
}

// AnswerLT applies the LT predicate on the "answer" field.
func AnswerLT(v string) predicate.Quiz {
	return predicate.Quiz(sql.FieldLT(FieldAnswer, v))
}

// AnswerLTE applies the LTE predicate on the "answer" field.
func AnswerLTE(v string) predicate.Quiz {
	return predicate.Quiz(sql.FieldLTE(FieldAnswer, v))
}

// AnswerContains applies the Contains predicate on the "answer" field.
func AnswerContains(v string) predicate.Quiz {
	return predicate.Quiz(sql.FieldContains(FieldAnswer, v))
}

// AnswerHasPrefix applies the HasPrefix predicate on the "answer" field.
func AnswerHasPrefix(v string) predicate.Quiz {
	return predicate.Quiz(sql.FieldHasPrefix(FieldAnswer, v))
}

// AnswerHasSuffix applies the HasSuffix predicate on the "answer" field.
func AnswerHasSuffix(v string) predicate.Quiz {
	return predicate.Quiz(sql.FieldHasSuffix(FieldAnswer, v))
}

// AnswerEqualFold applies the EqualFold predicate on the "answer" field.
func AnswerEqualFold(v string) predicate.Quiz {
	return predicate.Quiz(sql.FieldEqualFold(FieldAnswer, v))
}

// AnswerContainsFold applies the ContainsFold predicate on the "answer" field.
func AnswerContainsFold(v string) predicate.Quiz {
	return predicate.Quiz(sql.FieldContainsFold(FieldAnswer, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Quiz) predicate.Quiz {
	return predicate.Quiz(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Quiz) predicate.Quiz {
	return predicate.Quiz(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Quiz) predicate.Quiz {
	return predicate.Quiz(sql.NotPredicates(p))
}
