// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/sakuradaman/quiz/pkg/ent/predicate"
	"github.com/sakuradaman/quiz/pkg/ent/quiz"
)

// QuizUpdate is the builder for updating Quiz entities.
type QuizUpdate struct {
	config
	hooks    []Hook
	mutation *QuizMutation
}

// Where appends a list predicates to the QuizUpdate builder.
func (qu *QuizUpdate) Where(ps ...predicate.Quiz) *QuizUpdate {
	qu.mutation.Where(ps...)
	return qu
}

// SetProblem sets the "problem" field.
func (qu *QuizUpdate) SetProblem(s string) *QuizUpdate {
	qu.mutation.SetProblem(s)
	return qu
}

// SetNillableProblem sets the "problem" field if the given value is not nil.
func (qu *QuizUpdate) SetNillableProblem(s *string) *QuizUpdate {
	if s != nil {
		qu.SetProblem(*s)
	}
	return qu
}

// SetAnswer sets the "answer" field.
func (qu *QuizUpdate) SetAnswer(s string) *QuizUpdate {
	qu.mutation.SetAnswer(s)
	return qu
}

// SetNillableAnswer sets the "answer" field if the given value is not nil.
func (qu *QuizUpdate) SetNillableAnswer(s *string) *QuizUpdate {
	if s != nil {
		qu.SetAnswer(*s)
	}
	return qu
}

// Mutation returns the QuizMutation object of the builder.
func (qu *QuizUpdate) Mutation() *QuizMutation {
	return qu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (qu *QuizUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, qu.sqlSave, qu.mutation, qu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (qu *QuizUpdate) SaveX(ctx context.Context) int {
	affected, err := qu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (qu *QuizUpdate) Exec(ctx context.Context) error {
	_, err := qu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (qu *QuizUpdate) ExecX(ctx context.Context) {
	if err := qu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (qu *QuizUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(quiz.Table, quiz.Columns, sqlgraph.NewFieldSpec(quiz.FieldID, field.TypeInt))
	if ps := qu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := qu.mutation.Problem(); ok {
		_spec.SetField(quiz.FieldProblem, field.TypeString, value)
	}
	if value, ok := qu.mutation.Answer(); ok {
		_spec.SetField(quiz.FieldAnswer, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, qu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{quiz.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	qu.mutation.done = true
	return n, nil
}

// QuizUpdateOne is the builder for updating a single Quiz entity.
type QuizUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *QuizMutation
}

// SetProblem sets the "problem" field.
func (quo *QuizUpdateOne) SetProblem(s string) *QuizUpdateOne {
	quo.mutation.SetProblem(s)
	return quo
}

// SetNillableProblem sets the "problem" field if the given value is not nil.
func (quo *QuizUpdateOne) SetNillableProblem(s *string) *QuizUpdateOne {
	if s != nil {
		quo.SetProblem(*s)
	}
	return quo
}

// SetAnswer sets the "answer" field.
func (quo *QuizUpdateOne) SetAnswer(s string) *QuizUpdateOne {
	quo.mutation.SetAnswer(s)
	return quo
}

// SetNillableAnswer sets the "answer" field if the given value is not nil.
func (quo *QuizUpdateOne) SetNillableAnswer(s *string) *QuizUpdateOne {
	if s != nil {
		quo.SetAnswer(*s)
	}
	return quo
}

// Mutation returns the QuizMutation object of the builder.
func (quo *QuizUpdateOne) Mutation() *QuizMutation {
	return quo.mutation
}

// Where appends a list predicates to the QuizUpdate builder.
func (quo *QuizUpdateOne) Where(ps ...predicate.Quiz) *QuizUpdateOne {
	quo.mutation.Where(ps...)
	return quo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (quo *QuizUpdateOne) Select(field string, fields ...string) *QuizUpdateOne {
	quo.fields = append([]string{field}, fields...)
	return quo
}

// Save executes the query and returns the updated Quiz entity.
func (quo *QuizUpdateOne) Save(ctx context.Context) (*Quiz, error) {
	return withHooks(ctx, quo.sqlSave, quo.mutation, quo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (quo *QuizUpdateOne) SaveX(ctx context.Context) *Quiz {
	node, err := quo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (quo *QuizUpdateOne) Exec(ctx context.Context) error {
	_, err := quo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (quo *QuizUpdateOne) ExecX(ctx context.Context) {
	if err := quo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (quo *QuizUpdateOne) sqlSave(ctx context.Context) (_node *Quiz, err error) {
	_spec := sqlgraph.NewUpdateSpec(quiz.Table, quiz.Columns, sqlgraph.NewFieldSpec(quiz.FieldID, field.TypeInt))
	id, ok := quo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Quiz.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := quo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, quiz.FieldID)
		for _, f := range fields {
			if !quiz.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != quiz.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := quo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := quo.mutation.Problem(); ok {
		_spec.SetField(quiz.FieldProblem, field.TypeString, value)
	}
	if value, ok := quo.mutation.Answer(); ok {
		_spec.SetField(quiz.FieldAnswer, field.TypeString, value)
	}
	_node = &Quiz{config: quo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, quo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{quiz.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	quo.mutation.done = true
	return _node, nil
}
